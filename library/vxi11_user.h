/* vxi11_user.h
 * Copyright (C) 2006 Steve D. Sharples
 *
 * User library for opening, closing, sending to and receiving from
 * a device enabled with the VXI11 RPC ethernet protocol. Uses the files
 * generated by rpcgen vxi11.x.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * The author's email address is steve.sharples@nottingham.ac.uk
 */

#ifndef	_VXI11_USER_H_
#define	_VXI11_USER_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WIN32
#  ifdef vxi11_EXPORTS
#    define vx_EXPORT __declspec(dllexport)
#  else
#    define vx_EXPORT __declspec(dllimport)
#  endif
#else
#  define vx_EXPORT
#  define __stdcall
#endif

#include <stdlib.h>
#include <rpc/rpc.h>

typedef	struct _VXI11_CLINK VXI11_CLINK;

/* Default timeout value to use, in ms. */
#define	VXI11_DEFAULT_TIMEOUT	10000

/* Read timeout to use, in ms. */
#define	VXI11_READ_TIMEOUT	2000

/* vxi11_receive() return value if a query times out ON THE INSTRUMENT (and so
 * we have to resend the query). */
#define	VXI11_NULL_READ_RESP	50

/* vxi11_send() return value if a sent command times out ON THE INSTRUMENT. */
#define	VXI11_NULL_WRITE_RESP	51

/* client list stucture */
struct _vxi11_client_t {
    struct _vxi11_client_t *next;
    char address[20];
#ifndef WIN32
    CLIENT *client_address;
#endif
    int link_count;
};
typedef struct _vxi11_client_t vxi11_client_t;

/* The four main functions: open, close, send, receieve (plus a couple of wrappers) */
vx_EXPORT int vxi11_open_device(VXI11_CLINK **clink, const char *address, char *device, struct _vxi11_client_t **vxi11_clients);
vx_EXPORT int vxi11_close_device(VXI11_CLINK *clink, const char *address, struct _vxi11_client_t **vxi11_clients);
vx_EXPORT int vxi11_send(VXI11_CLINK *clink, const char *cmd, size_t len);
vx_EXPORT int vxi11_send_printf(VXI11_CLINK *clink, const char *format, ...);
vx_EXPORT ssize_t vxi11_receive(VXI11_CLINK *clink, char *buffer, size_t len);
vx_EXPORT ssize_t vxi11_receive_timeout(VXI11_CLINK *clink, char *buffer, size_t len, unsigned long timeout);

/* Utility functions, that use send() and receive(). Use these too. */
vx_EXPORT int vxi11_send_data_block(VXI11_CLINK *clink, const char *cmd, char *buffer, size_t len);
vx_EXPORT ssize_t vxi11_receive_data_block(VXI11_CLINK *clink, char *buffer, size_t len, unsigned long timeout);
vx_EXPORT int vxi11_send_and_receive(VXI11_CLINK *clink, const char *cmd, char *buf, size_t len, unsigned long timeout);
vx_EXPORT long vxi11_obtain_long_value(VXI11_CLINK *clink, const char *cmd);
vx_EXPORT long vxi11_obtain_long_value_timeout(VXI11_CLINK *clink, const char *cmd, unsigned long timeout);
vx_EXPORT double vxi11_obtain_double_value(VXI11_CLINK *clink, const char *cmd);
vx_EXPORT double vxi11_obtain_double_value_timeout(VXI11_CLINK *clink, const char *cmd, unsigned long timeout);

#ifdef __cplusplus
}
#endif

#endif
